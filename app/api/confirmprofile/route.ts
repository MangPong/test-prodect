import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import cloudinary from "@/lib/cloudinary";
import jwt from "jsonwebtoken"; // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ `npm install jsonwebtoken`

const prisma = new PrismaClient();

export async function POST(req: Request) {
    try {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Header ‡∏ß‡πà‡∏≤‡∏°‡∏µ Authorization ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const authHeader = req.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }
        
        // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        const token = authHeader.split(" ")[1];
        const SECRET_KEY = process.env.JWT_SECRET_KEY || "default-secret-key";
        if (!SECRET_KEY) {
            throw new Error("üö® SECRET_KEY is missing. Please set JWT_SECRET_KEY in your environment variables.");
        }
        const decoded = jwt.verify(token, SECRET_KEY);
        console.log("üîê Token decoded:", decoded);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Request ‡πÄ‡∏õ‡πá‡∏ô `multipart/form-data`
        if (!req.headers.get("content-type")?.includes("multipart/form-data")) {
            return NextResponse.json({ error: "Invalid Content-Type, must be multipart/form-data" }, { status: 400 });
        }

        // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô `FormData`
        const formData = await req.formData();
        console.log("üì¶ FormData Received:", formData);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å FormData
        const userId = Number(formData.get("userId"));
        const title = formData.get("title") as string;
        const firstName = formData.get("firstName") as string;
        const lastName = formData.get("lastName") as string;
        const username = formData.get("username") as string;
        const phoneNumber = formData.get("phoneNumber") as string;
        const email = formData.get("email") as string;
        const address = formData.get("address") as string;
        const bank = formData.get("bank") as string;
        const accountNumber = formData.get("accountNumber") as string;
        const status = (formData.get("status") as string) || "pending";

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
        if (!userId || !firstName || !lastName || !address) {
            return NextResponse.json({ error: "‚ùå Missing required fields" }, { status: 400 });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
        let profileImage = "";
        let photoIdCard = "";

        const uploadImage = async (file: File, folder: string) => {
            const buffer = Buffer.from(await file.arrayBuffer());
            return new Promise((resolve, reject) => {
                cloudinary.uploader.upload_stream({ folder }, (error, result) => {
                    if (error) {
                        console.error(`üö® Failed to upload ${folder}:`, error);
                        reject(error);
                    } else {
                        resolve(result?.secure_url);
                    }
                }).end(buffer);
            });
        };

        const profileImageFile = formData.get("profileImage") as File;
        const idCardImageFile = formData.get("photoIdCard") as File;

        if (profileImageFile && profileImageFile.size > 0) {
            profileImage = (await uploadImage(profileImageFile, "profile_pictures")) as string;
        }

        if (idCardImageFile && idCardImageFile.size > 0) {
            photoIdCard = (await uploadImage(idCardImageFile, "id_cards")) as string;
        } else {
            return NextResponse.json({ error: "‚ùå ID Card image is required" }, { status: 400 });
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const newProfile = await prisma.profileSell.create({
            data: {
                userId,
                title,
                firstName,
                lastName,
                username,
                phoneNumber,
                email,
                address,
                bank,
                accountNumber,
                profileImage,
                photoIdCard,
                status,
            },
        });

        console.log("‚úÖ Profile created successfully:", newProfile);
        return NextResponse.json(newProfile, { status: 201 });

    } catch (error: any) {
        console.error("üî• Unexpected API Error:", error);
        return NextResponse.json(
            { error: "‚ùå Failed to create profile", details: error?.message || error.toString() },
            { status: 500 }
        );
    }
}
